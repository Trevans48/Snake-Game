{"ast":null,"code":"class LRKeyInputHandler {\n  constructor() {\n    this.wasLeftArrowPushed = void 0;\n    this.wasRightArrowPushed = void 0;\n    this.wasLeftArrowPushed = false;\n    this.wasRightArrowPushed = false;\n    window.addEventListener(\"keydown\", event => {\n      if (event.key === \"ArrowLeft\") {\n        this.wasLeftArrowPushed = true;\n      } else if (event.key === \"ArrowRight\") {\n        this.wasRightArrowPushed = true;\n      }\n    });\n  }\n\n  madeLeftMove() {\n    return this.wasLeftArrowPushed;\n  }\n\n  madeRightMove() {\n    return this.wasRightArrowPushed;\n  }\n\n  resetLeftMove() {\n    this.wasLeftArrowPushed = false;\n  }\n\n  resetRightMove() {\n    this.wasRightArrowPushed = false;\n  }\n\n}\n\nexport default LRKeyInputHandler;","map":{"version":3,"sources":["C:/Users/trevo/OneDrive/Documents/College/Snake Game Code/Snake-Game/sandbox/src/IInputHandler.ts"],"names":["LRKeyInputHandler","constructor","wasLeftArrowPushed","wasRightArrowPushed","window","addEventListener","event","key","madeLeftMove","madeRightMove","resetLeftMove","resetRightMove"],"mappings":"AAOA,MAAMA,iBAAN,CAAiD;AAI7CC,EAAAA,WAAW,GAAG;AAAA,SAHNC,kBAGM;AAAA,SAFNC,mBAEM;AACV,SAAKD,kBAAL,GAA0B,KAA1B;AACA,SAAKC,mBAAL,GAA2B,KAA3B;AACAC,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCC,KAAD,IAA0B;AAC7D,UAAIA,KAAK,CAACC,GAAN,KAAc,WAAlB,EAA+B;AAC3B,aAAKL,kBAAL,GAA0B,IAA1B;AACH,OAFD,MAEO,IAAII,KAAK,CAACC,GAAN,KAAc,YAAlB,EAAgC;AACnC,aAAKJ,mBAAL,GAA2B,IAA3B;AACH;AACJ,KANG;AAOH;;AAEDK,EAAAA,YAAY,GAAY;AACpB,WAAO,KAAKN,kBAAZ;AACH;;AAEDO,EAAAA,aAAa,GAAY;AACrB,WAAO,KAAKN,mBAAZ;AACH;;AAEDO,EAAAA,aAAa,GAAS;AAClB,SAAKR,kBAAL,GAA0B,KAA1B;AACH;;AAEDS,EAAAA,cAAc,GAAS;AACnB,SAAKR,mBAAL,GAA2B,KAA3B;AACH;;AA9B4C;;AAiCjD,eAAeH,iBAAf","sourcesContent":["interface IInputHandler {\r\n    madeLeftMove(): boolean;\r\n    madeRightMove(): boolean;\r\n    resetLeftMove(): void;\r\n    resetRightMove(): void;\r\n}\r\n\r\nclass LRKeyInputHandler implements IInputHandler {\r\n    private wasLeftArrowPushed: boolean;\r\n    private wasRightArrowPushed: boolean;\r\n\r\n    constructor() {\r\n        this.wasLeftArrowPushed = false;\r\n        this.wasRightArrowPushed = false;\r\n        window.addEventListener(\"keydown\", (event: KeyboardEvent) => {\r\n        if (event.key === \"ArrowLeft\") {\r\n            this.wasLeftArrowPushed = true;\r\n        } else if (event.key === \"ArrowRight\") {\r\n            this.wasRightArrowPushed = true;\r\n        }\r\n    });\r\n    }\r\n\r\n    madeLeftMove(): boolean {\r\n        return this.wasLeftArrowPushed;\r\n    }\r\n\r\n    madeRightMove(): boolean {\r\n        return this.wasRightArrowPushed;\r\n    }\r\n\r\n    resetLeftMove(): void {\r\n        this.wasLeftArrowPushed = false;\r\n    }\r\n\r\n    resetRightMove(): void {\r\n        this.wasRightArrowPushed = false;\r\n    }\r\n}\r\n\r\nexport default LRKeyInputHandler;\r\n"]},"metadata":{},"sourceType":"module"}